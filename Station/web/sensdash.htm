<!DOCTYPE html>
<!-- 
  This is a simple Sensors Dashboard page for SmartGarden system.
 
 Creative Commons Attribution-ShareAlike 3.0 license
 (c) 2015 Tony-osp (tony-osp.dreamwidth.org)
-->
<html>
  <head>
    <meta charset="utf-8">
    <title>SmartGarden Sensors Dashboard</title>  
    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.1/jquery.mobile-1.4.1.min.css" type="text/css">
    <link rel="stylesheet" href="custom.css" />
    <script src="http://code.jquery.com/jquery-1.11.3.min.js" type="text/javascript"></script>
    <script src="http://code.jquery.com/mobile/1.4.1/jquery.mobile-1.4.1.min.js" type="text/javascript"></script>
     <script src="http://code.highcharts.com/highcharts.js"></script>
    <script src="http://code.highcharts.com/highcharts-more.js"></script>
<style>    
.thermometer-outer {
    background: #c4f0ff;
    border: 1px solid #c4c4c4;
    border-radius: 3px;
}
.thermometer-outer-v {
    height: 80px;
    width: 10px;
}
.thermometer-inner {
    background: #3f83f7;
}
.thermometer-inner-v {
    width: 10px;
}
.auto-style1 {
    font-size: medium;
}
  </style>
</head>
    

<body>
    <div data-role="page" id="sensors">

    <script src="jqtherm.js"></script>
    <script src="therm.js"></script>

    <script type="text/javascript">
        setupTempSens = function (sID, val) {

            //alert("setupTempSens - entering");

            $('#' + sID).thermometer({
                scaleLabelText: 1.4,
                unitsLabel: " F",
                color: {
                    label: 'rgba(55, 255, 255, 1)',
                },
                max: 120,
                min: 0,
                majorTicks: 4,
                minorTicks: 1,
                scaleTickLabelText: 1.5,
                color: {
                    fill: "rgba(91,231,246,1)",
                    label: '#000000'
                },
                bulbRadiusByHeight: true
            });

            $('#' + sID).thermometer('setValue', val);
        };

        setTempSens = function (sID, val, age) {

            $('#' + sID).thermometer('setValue', val);
            d = document.getElementById('ar_' + sID);
            d.innerHTML = Math.round(age / 60); // update displayed reading age

            d = document.getElementById('lv_' + sID);
            d.innerHTML = val; // update last reading (in the text)
        };

        setupPressureSens = function (sID, val) {

            $('#' + sID).highcharts({

                chart: {
                    type: 'gauge',
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: 0,
                    plotShadow: false,
                    marginTop: 0,
                    spacing: [0, 0, 0, 0]
                },

                title: {
                    text: null
                },

                exporting: {
                    enabled: false
                },
                credits: {
                    enabled: false
                },

                pane: {
                    startAngle: -150,
                    endAngle: 150,
                    background: [{
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#FFF'],
                                [1, '#333']
                            ]
                        },
                        borderWidth: 0,
                        outerRadius: '109%'
                    }, {
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#333'],
                                [1, '#FFF']
                            ]
                        },
                        borderWidth: 1,
                        outerRadius: '107%'
                    }, {
                        // default background
                    }, {
                        backgroundColor: '#DDD',
                        borderWidth: 0,
                        outerRadius: '105%',
                        innerRadius: '103%'
                    }]
                },

                // the value axis
                yAxis: {
                    min: 900,
                    max: 1100,

                    minorTickInterval: 'auto',
                    minorTickWidth: 1,
                    minorTickLength: 10,
                    minorTickPosition: 'inside',
                    minorTickColor: '#666',

                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 10,
                    tickColor: '#666',
                    labels: {
                        step: 2,
                        rotation: 'auto',
                        style: { "color": "#6D869F", "font-size": "80%" }
                    },
                    title: {
                        text: null
                    },
                    plotBands: [{
                        from: 900,
                        to: 950,
                        color: '#DDDF0D' // yellow
                    }, {
                        from: 950,
                        to: 1050,
                        color: '#55BF3B' // green
                    }, {
                        from: 1050,
                        to: 1100,
                        color: '#DDDF0D' // yellow
                    }]
                },

                series: [{
                    name: 'Pressure',
                    data: [val],
                    tooltip: {
                        valueSuffix: ' mbar'
                    }
                }]
            });

        };

        setPressureSens = function (sID, val, age) {

            var chart = $('#' + sID).highcharts();
            chart.series[0].setData([val]);

            d = document.getElementById('ar_' + sID);
            d.innerHTML = Math.round(age / 60); // update displayed reading age

            d = document.getElementById('lv_' + sID);
            d.innerHTML = val; // update last reading (in the text)
        }

        setupHumiditySens = function (sID, val) {

            $('#' + sID).highcharts({

                chart: {
                    type: 'gauge',
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: 0,
                    plotShadow: false,
                    marginTop: 0,
                    spacing: [0, 0, 0, 0]
        },

                title: {
                    text: null
                },

                exporting: {
                    enabled: false
                },
                credits: {
                    enabled: false
                },

                pane: {
                    startAngle: -150,
                    endAngle: 150,
                    background: [{
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#FFF'],
                                [1, '#333']
                            ]
                        },
                        borderWidth: 0,
                        outerRadius: '109%'
                    }, {
                        backgroundColor: {
                            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                            stops: [
                                [0, '#333'],
                                [1, '#FFF']
                            ]
                        },
                        borderWidth: 1,
                        outerRadius: '107%'
                    }, {
                        // default background
                    }, {
                        backgroundColor: '#DDD',
                        borderWidth: 0,
                        outerRadius: '105%',
                        innerRadius: '103%'
                    }]
                },

                // the value axis
                yAxis: {
                    min: 0,
                    max: 100,

                    minorTickInterval: 'auto',
                    minorTickWidth: 1,
                    minorTickLength: 10,
                    minorTickPosition: 'inside',
                    minorTickColor: '#666',

                    tickPixelInterval: 30,
                    tickWidth: 2,
                    tickPosition: 'inside',
                    tickLength: 10,
                    tickColor: '#666',
                    labels: {
                        step: 2,
                        rotation: 'auto',
                        style: { "color": "#6D869F", "font-size": "80%" }
                    },
                    title: {
                        text: null
                    },
                    plotBands: [{
                        from: 0,
                        to: 30,
                        color: '#DDDF0D' // yellow
                    }, {
                        from: 30,
                        to: 70,
                        color: '#55BF3B' // green
                    }, {
                        from: 70,
                        to: 100,
                        color: '#DDDF0D' // yellow
                    }]
                },

                series: [{
                    name: 'Humidity',
                    data: [val],
                    tooltip: {
                        valueSuffix: '%'
                    }
                }]
            });

        };

        setHumiditySens = function (sID, val, age) {

            var chart = $('#' + sID).highcharts();
            chart.series[0].setData([val]);

            d = document.getElementById('ar_' + sID);
            d.innerHTML = Math.round(age / 60); // update displayed reading age

            d = document.getElementById('lv_' + sID);
            d.innerHTML = val; // update last reading (in the text)
        }


        setupSensors = function () {

            $.getJSON("json/sensNow",
            function (data) {

                var sensHtml = "";
                // alert("setupSensors callback"); 

                sensHtml += '<table><tr>\n';

                for (var i = 0; i < data.sensors.length; i++) {

                    if ((i % 2) == 0) sensHtml += '</tr><tr>\n';    // four sensors in a row

                    sensHtml += '<td style="vertical-align: text-top;">\n';
                    if (data.sensors[i].sensorType == 'Temperature') {
                        sensHtml += '<div style="text-align: center"><h3>' + data.sensors[i].sensorName + '</h3></div>\n';
                        sensHtml += '<table>\n';
                        sensHtml += '<tr><td style="vertical-align: middle;">';
                        sensHtml += '<br>SensorID: ' + data.sensors[i].sensorID;
                        sensHtml += '<br>Station : ' + data.sensors[i].stationName;
                        sensHtml += '<br>Sensor channel: ' + data.sensors[i].sensorChannel;
                        sensHtml += '<br><b>Temperature: <span id="lv_sens' + i + '">' + data.sensors[i].lastReading + '</span></b>';
                        sensHtml += '<br>Updated <span id="ar_sens' + i + '">' + Math.round(data.sensors[i].readingAge / 60) + '</span> min. ago';
                        sensHtml += '</td>';

                        sensHtml += '<td>';
                        sensHtml += '<canvas id="sens' + i + '" height="150" width="100"></canvas>';
                        sensHtml += '</td>\n';

                        sensHtml += '</tr></table>\n';
                    }
                    else if (data.sensors[i].sensorType == 'Pressure') {
                        sensHtml += '<div style="text-align: center"><h3>' + data.sensors[i].sensorName + '</h3></div>\n';
                        sensHtml += '<table>\n';
                        sensHtml += '<tr><td style="vertical-align: middle;">';
                        sensHtml += '<br>SensorID: ' + data.sensors[i].sensorID;
                        sensHtml += '<br>Station : ' + data.sensors[i].stationName;
                        sensHtml += '<br>Sensor channel: ' + data.sensors[i].sensorChannel;
                        sensHtml += '<br><b>Air Pressure: <span id="lv_sens' + i + '">' + data.sensors[i].lastReading + '</span></b>';
                        sensHtml += '<br>Updated <span id="ar_sens' + i + '">' + Math.round(data.sensors[i].readingAge / 60) + '</span> min. ago';
                        sensHtml += '</td>';

                        sensHtml += '<td>';
                        sensHtml += '<div id="sens' + i + '" style="vertical-align: middle; width: 150px; height: 150px; margin: 0 auto"></div>';
                        sensHtml += '</td>\n';

                        sensHtml += '</tr></table>\n';
                    }
                    else if (data.sensors[i].sensorType == 'Humidity') {
                        sensHtml += '<div style="text-align: center"><h3>' + data.sensors[i].sensorName + '</h3></div>\n';
                        sensHtml += '<table>\n';
                        sensHtml += '<tr><td style="vertical-align: middle;">';
                        sensHtml += '<br>SensorID: ' + data.sensors[i].sensorID;
                        sensHtml += '<br>Station : ' + data.sensors[i].stationName;
                        sensHtml += '<br>Sensor channel: ' + data.sensors[i].sensorChannel;
                        sensHtml += '<br><b>Humidity: <span id="lv_sens' + i + '">' + data.sensors[i].lastReading + '</span></b>';
                        sensHtml += '<br>Updated <span id="ar_sens' + i + '">' + Math.round(data.sensors[i].readingAge / 60) + '</span> min. ago';
                        sensHtml += '</td>';

                        sensHtml += '<td>';
                        sensHtml += '<div id="sens' + i + '" style="vertical-align: middle; width: 150px; height: 150px; margin: 0 auto"></div>';
                        sensHtml += '</td>\n';

                        sensHtml += '</tr></table>\n';
                    }
                    else {      // all other sensor types

                        sensHtml += '<div style="text-align: center"><h3>' + data.sensors[i].sensorName + '</h3></div>\n';
                        sensHtml += '<table>\n';
                        sensHtml += '<tr><td style="vertical-align: text-bottom;">';
                        sensHtml += '<br>SensorID: ' + data.sensors[i].sensorID;
                        sensHtml += '<br>Station : ' + data.sensors[i].stationName;
                        sensHtml += '<br>Sensor channel: ' + data.sensors[i].sensorChannel;
                        sensHtml += '<br><b>' + data.sensors[i].sensorType + ': <span id="lv_sens' + i + '">' + data.sensors[i].lastReading + '</span></b>';
                        sensHtml += '<br>Updated <span id="ar_sens' + i + '">' + Math.round(data.sensors[i].readingAge / 60) + '</span> min. ago';
                        sensHtml += '</td>';
                        sensHtml += '</tr></table>\n';
                    }
                    sensHtml += '</td>\n';
                    sensHtml += '<td>&nbsp;&nbsp;&nbsp;</td>\n';
                };
                sensHtml += '</tr></table>\n';

                $('#sens-list').html(sensHtml);             // load html into the placeholder element

                for (var i = 0; i < data.sensors.length; i++) {     // go through the list of sensors and activate sensors that need to be activated

                    if (data.sensors[i].sensorType == 'Temperature') setupTempSens('sens' + i, data.sensors[i].lastReading);
                    else if (data.sensors[i].sensorType == 'Pressure') setupPressureSens('sens' + i, data.sensors[i].lastReading);
                    else if (data.sensors[i].sensorType == 'Humidity') setupHumiditySens('sens' + i, data.sensors[i].lastReading);
                }

            });
        };


        sd_refreshSensorsData = function () {
            if ($.mobile.activePage.attr("id") != "sensors") return;

            $('html,body,button').css('cursor', 'wait');
            $.getJSON("json/sensNow",
            function (data) {

                $('html,body,button').css('cursor', 'auto');
                // alert("refreshSensorsData callback"); 

                for (var i = 0; i < data.sensors.length; i++) {     // go through the list of sensors and activate sensors that need to be activated

                    if (data.sensors[i].sensorType == 'Temperature') setTempSens('sens' + i, data.sensors[i].lastReading, data.sensors[i].readingAge);
                    else if (data.sensors[i].sensorType == 'Pressure') setPressureSens('sens' + i, data.sensors[i].lastReading, data.sensors[i].readingAge);
                    else if (data.sensors[i].sensorType == 'Humidity') setHumiditySens('sens' + i, data.sensors[i].lastReading, data.sensors[i].readingAge);
                }
            });
        };

        var int_sd_refreshSensorsData;

        $('#sensors').on('pagebeforeshow', function () {
            //window.setTimeout(function () { setupSensors(); }, 250);  // setup sensors with a small delay
            setupSensors();   // setup sensors right away

            if( int_sd_refreshSensorsData == null )
                int_sd_refreshSensorsData = setInterval(sd_refreshSensorsData, 600000);       // also schedule data refresh every 10 min
        });

    </script>

      <div data-theme="a" data-role="header" data-position="fixed">	
	    <a data-role="button" data-rel="back" href="#page1" data-icon="back" data-iconpos="left" class="ui-btn-left">Back</a>
        <h1>SmartGarden Sensors Dashboard</h1>
      	<a id="refreshButton" href="javascript:sd_refreshSensorsData();"  data-iconpos="right"  data-icon="refresh" data-role="button" class="ui-btn-right">Refresh</a>
      </div>
      <div data-role="content">

            <div style="text-align:center" id="sens-list"></div>
          <br />
        <div style="text-align:center" id="Div2"><a href="/sens-h.htm" target="_blank"><strong>Click for historical sensors data</strong></a></div>

      </div> <!-- /content -->
  
    </div> <!-- /page -->

</body>
</html>